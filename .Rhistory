labs(title = "Top three and the Revenue each year",
x = "Year", y = "Revenue (million)", fill = "Sources of Traffic") +
theme_minimal()
df$Source...Medium
#USERS
#table of summary device
summary_device <- df %>%
group_by(Source...Medium) %>%
summarise(
total_users = sum(Users, na.rm = TRUE),
total_newusers = sum(New.Users, na.rm = TRUE),
.groups = "drop"
) %>%
print(summary_device)
#change to numeric instead of character
df$Sessions <- as.numeric(gsub(",", "", df$Sessions))
df$`Conversion.Rate....` <- as.numeric(gsub(",", "", df$`Conversion.Rate....`))
df$Users <- as.numeric(gsub(",", "", df$Users))
df$New.Users <- as.numeric(gsub(",", "", df$New.Users))
#USERS
#table of summary device
summary_device <- df %>%
group_by(Source...Medium) %>%
summarise(
total_users = sum(Users, na.rm = TRUE),
total_newusers = sum(New.Users, na.rm = TRUE),
.groups = "drop"
) %>%
print(summary_device)
#chart of summary device / total users
ggplot(summary_device, aes(x = total_users, y = reorder(`Source...Medium`, total_users), fill = total_users)) +
geom_bar (stat = "identity", position = "dodge") +
scale_fill_gradient(name = "Number of Users") +
labs(title = " Total Users by SourceMedium", x = "Total Users", y = "Devices") +
theme_minimal()
#NEWUSERS
#chart of summary device / total new users
ggplot(summary_device, aes(x = total_newusers, y = reorder(`Source...Medium`, total_users), fill = total_newusers)) +
geom_bar (stat = "identity", position = "dodge") + scale_fill_gradient(name = "Number of New Users") +
labs(title = " Total New Users by SourceMedium", x = "Total New Users", y = "Devices") +
theme_minimal()
#table of accessed device
accessed_devices <- df %>%
group_by(Year, Month.of.the.year, `Source...Medium`) %>%
summarise(total_sessions = sum(Sessions, na.rm = TRUE))
print(accessed_devices)
#summarize year and month in accessed_devices
accessed_devices$YearMonth <- paste(accessed_devices$Year, sprintf("%02d", accessed_devices$Month.of.the.year), sep ="-" )
#chart of Sessions
ggplot(accessed_devices, aes(x = factor(YearMonth), y = total_sessions, fill = `Source...Medium`)) + geom_bar (stat = "identity", position = "dodge") +
labs(title = " Devices used by customers/visitors to
access the site for each devices ",
x = "Year and Month", y = "Sessions") + theme_minimal()
# 1. Tạo bản sao dữ liệu
df_cleaned <- df2
# 2. Các cột có giá trị 0 cần xử lý
cols_to_fix <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI")
# 3. Thay 0 bằng NA
df_cleaned[cols_to_fix] <- lapply(df_cleaned[cols_to_fix], function(x) {
ifelse(x == 0, NA, x)
})
# 4. Điền NA bằng median
df_cleaned[cols_to_fix] <- lapply(df_cleaned[cols_to_fix], function(x) {
ifelse(is.na(x), median(x, na.rm = TRUE), x)
})
View(df_cleaned)
# 1. Tạo bản sao dữ liệu
df_cleaned <- df2
# 2. Các cột có giá trị 0 cần xử lý
cols_to_fix <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI")
# 3. Thay 0 bằng NA
df_cleaned[cols_to_fix] <- lapply(df_cleaned[cols_to_fix], function(x) {
ifelse(x == 0, NA, x)
})
# 4. Điền NA bằng median
df_cleaned[cols_to_fix] <- lapply(df_cleaned[cols_to_fix], function(x) {
ifelse(is.na(x), median(x, na.rm = TRUE), x)
})
print(df_cleaned)
# 1. Tạo bản sao dữ liệu
df2_cleaned <- df2
# 2. Các cột có giá trị 0 cần xử lý
cols_to_fix <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI")
# 3. Thay 0 bằng NA
df2_cleaned[cols_to_fix] <- lapply(df_cleaned[cols_to_fix], function(x) {
ifelse(x == 0, NA, x)
})
# 4. Điền NA bằng median
df2_cleaned[cols_to_fix] <- lapply(df2_cleaned[cols_to_fix], function(x) {
ifelse(is.na(x), median(x, na.rm = TRUE), x)
})
print(df_cleaned)
print()
View(df2_cleaned)
# 1. Tạo bản sao dữ liệu
df2_cleaned <- df2
# 2. Các cột có giá trị 0 cần xử lý
cols_to_fix <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI")
# 3. Thay 0 bằng NA
df2_cleaned[cols_to_fix] <- lapply(df_cleaned[cols_to_fix], function(x) {
ifelse(x == 0, NA, x)
})
# 4. Điền NA bằng median
df2_cleaned[cols_to_fix] <- lapply(df2_cleaned[cols_to_fix], function(x) {
ifelse(is.na(x), median(x, na.rm = TRUE), x)
})
print(df_cleaned)
summary(df2)         # checkout the outliner to find errors
str(df2)             # check out the data type per columns
sapply(df2, function(x) sum(is.na(x)))  # counting NA numbers
sapply(df2, function(x) sum(x == 0))    # Check for 0 if not valid
View(p)
View(accessed_devices)
View(df2)
#change to numeric instead of character
df$Sessions <- as.numeric(gsub(",", "", df$Sessions))
df$`Conversion.Rate....` <- as.numeric(gsub(",", "", df$`Conversion.Rate....`))
df$Users <- as.numeric(gsub(",", "", df$Users))
df$New.Users <- as.numeric(gsub(",", "", df$New.Users))
#USERS
#table of summary device
summary_device <- df %>%
group_by(Source...Medium) %>%
summarise(
total_users = sum(Users, na.rm = TRUE),
total_newusers = sum(New.Users, na.rm = TRUE),
.groups = "drop"
) %>%
print(summary_device)
#chart of summary device / total users
ggplot(summary_device, aes(x = total_users, y = reorder(`Source...Medium`, total_users), fill = total_users)) +
geom_bar (stat = "identity", position = "dodge") +
scale_fill_gradient(name = "Number of Users") +
labs(title = " Total Users by SourceMedium", x = "Total Users", y = "Devices") +
theme_minimal()
#USERS
#table of summary device
summary_device <- df %>%
group_by(Source...Medium) %>%
summarise(
total_users = sum(Users, na.rm = TRUE),
total_newusers = sum(New.Users, na.rm = TRUE),
.groups = "drop"
) %>%
print(summary_device)
#chart of summary device / total users
ggplot(summary_device, aes(x = total_users, y = reorder(`Source...Medium`, total_users), fill = total_users)) +
geom_bar (stat = "identity", position = "dodge") +
scale_fill_gradient(name = "Number of Users") +
labs(title = " Total Users by Devices", x = "Total Users", y = "Devices") +
theme_minimal()
View(summary_stats)
View(summary_device)
#NEWUSERS
#chart of summary device / total new users
ggplot(summary_device, aes(x = total_newusers, y = reorder(`Source...Medium`, total_users), fill = total_newusers)) +
geom_bar (stat = "identity", position = "dodge") + scale_fill_gradient(name = "Number of New Users") +
labs(title = " Total New Users by Devices", x = "Total New Users", y = "Devices") +
theme_minimal()
#table of conversion rate
conversion_rate <- df %>%
group_by(Year, Month.of.the.year, `Source...Medium`) %>%
summarise(total_conversion = sum(`Conversion.Rate....`, na.rm = TRUE))
print(conversion_rate)
#summarize year and month in conversion_rate
conversion_rate$YearMonth <- paste(conversion_rate$Year, sprintf("%02d", conversion_rate$Month.of.the.year), sep = "-")
#chart of Conversion
ggplot(conversion_rate, aes(x = factor(YearMonth), y = total_conversion, fill = `Source...Medium`)) + geom_bar (stat = "identity", position = "dodge") +
labs(title = " Conversion rate for each devices for each year and month ",
x = "Year and Month", y = "Conversion") + theme_minimal()
#table of conversion rate
conversion_rate <- df %>%
group_by(Year, Month.of.the.year, `Source...Medium`) %>%
summarise(total_conversion = sum(`Conversion.Rate....`, na.rm = TRUE))
print(conversion_rate)
#summarize year and month in conversion_rate
conversion_rate$YearMonth <- paste(conversion_rate$Year, sprintf("%02d", conversion_rate$Month.of.the.year), sep = "-")
#chart of Conversion
ggplot(conversion_rate, aes(x = factor(YearMonth), y = total_conversion, fill = `Source...Medium`)) + geom_bar (stat = "identity", position = "dodge") +
labs(title = " Conversion rate for each devices for each year and month ",
x = "Year and Month", y = "Conversion") + theme_minimal()
#table of conversion rate
conversion_rate <- df %>%
group_by(Year, Month.of.the.year, `Source...Medium`) %>%
summarise(total_conversion = sum(`Conversion.Rate....`, na.rm = TRUE))
print(conversion_rate)
#summarize year and month in conversion_rate
conversion_rate$YearMonth <- paste(conversion_rate$Year, sprintf("%02d", conversion_rate$Month.of.the.year), sep = "-")
#chart of Conversion
ggplot(conversion_rate, aes(x = factor(YearMonth), y = total_conversion, fill = `Source...Medium`)) + geom_bar (stat = "identity", position = "dodge") +
labs(title = " Conversion rate for each devices for each year and month ",
x = "Year and Month", y = "Total Conversion") + theme_minimal()
#table of conversion rate
conversion_rate <- df %>%
group_by(Year, Month.of.the.year, `Source...Medium`) %>%
summarise(total_conversion = sum(`Conversion.Rate....`, na.rm = TRUE))
print(conversion_rate)
#summarize year and month in conversion_rate
conversion_rate$YearMonth <- paste(conversion_rate$Year, sprintf("%02d", conversion_rate$Month.of.the.year), sep = "-")
#chart of Conversion
ggplot(conversion_rate, aes(x = factor(YearMonth), y = total_conversion, fill = `Source...Medium`)) + geom_bar (stat = "identity", position = "dodge") +
labs(title = " Conversion rate for each devices for each year and month ",
x = "Year and Month", y = "Total Conversion") + theme_minimal()
#table of conversion rate
conversion_rate <- df %>%
group_by(Year, Month.of.the.year, `Source...Medium`) %>%
summarise(total_conversion = sum(`Conversion.Rate....`, na.rm = TRUE))
print(conversion_rate)
#summarize year and month in conversion_rate
conversion_rate$YearMonth <- paste(conversion_rate$Year, sprintf("%02d", conversion_rate$Month.of.the.year), sep = "-")
#chart of Conversion
ggplot(conversion_rate, aes(x = factor(YearMonth), y = total_conversion, fill = `Source...Medium`)) + geom_bar (stat = "identity", position = "dodge") +
labs(title = " Total Conversion for each devices for each year and month ",
x = "Year and Month", y = "Total Conversion") + theme_minimal()
# Change to numeric instead of character
df$`Bounce.Rate` <- as.numeric(sub("%", "", df$`Bounce.Rate`)) / 100
df$`Conversion.Rate....` <- as.numeric(df$`Conversion.Rate....`)
df$Transactions <- as.numeric(gsub(",", "", df$Transactions))
df$Revenue <- as.numeric(gsub(",", "", df$Revenue))
# correlation analysis
cor_matrix <- cor(relationship, use="complete.obs")        # use="" check for NA
print(cor_matrix)
# use corrplot library to create heatmap chart
ggcorrplot(cor_matrix,
lab = TRUE,
type = "lower",
colors = c("green", "pink", "lightblue"),
tl.srt = 45,
title = "Heat map of correlation for Bounce Rate - Conversion Rate - Transactions - Revenue",
)
# use corrplot library to create heatmap chart
ggcorrplot(cor_matrix,
lab = TRUE,
type = "lower",
colors = c("green", "pink", "lightblue"),
title = "Heat map of correlation for Bounce Rate - Conversion Rate - Transactions - Revenue",
)
# use corrplot library to create heatmap chart
ggcorrplot(cor_matrix,
lab = TRUE,
type = "lower",
colors = c("green", "pink", "lightblue"),
title = "Heat map of correlation for Bounce Rate - Conversion Rate - Transactions - Revenue",
)
ggplot(relationship, aes(x = Bounce.Rate, y = Conversion.Rate....)) +
geom_point() +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Bounce Rate vs Conversion chart")
ggplot(relationship, aes(x = Bounce.Rate, y = Conversion.Rate....)) +
geom_point() +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Bounce Rate vs Conversion Rate chart")
# use corrplot library to create heatmap chart
ggcorrplot(cor_matrix,
lab = TRUE,
type = "upper",
colors = c("green", "pink", "lightblue"),
tl.srt = 45,
title = "Heat map of correlation for Bounce Rate - Conversion Rate - Transactions - Revenue",
)
# use corrplot library to create heatmap chart
ggcorrplot(cor_matrix,
lab = TRUE,
type = "lower",
colors = c("green", "pink", "lightblue"),
tl.srt = 45,
title = "Heat map of correlation for Bounce Rate - Conversion Rate - Transactions - Revenue",
)
# use corrplot library to create heatmap chart
ggcorrplot(cor_matrix,
lab = TRUE,
type = "lower",
colors = c("green", "pink", "lightblue"),
tl.srt = 45,
title = "Heat map of correlation for Bounce Rate - Conversion Rate - Transactions - Revenue",
)
# use corrplot library to create heatmap chart
ggcorrplot(cor_matrix,
lab = TRUE,
type = "lower",
colors = c("green", "pink", "lightblue", "yellow"),
tl.srt = 45,
title = "Heat map of correlation for Bounce Rate - Conversion Rate - Transactions - Revenue",
)
# use corrplot library to create heatmap chart
ggcorrplot(cor_matrix,
lab = TRUE,
type = "lower",
colors = c("green", "pink", "lightblue"),
tl.srt = 45,
title = "Heat map of correlation for Bounce Rate - Conversion Rate - Transactions - Revenue",
)
ggplot(relationship, aes(x = Transactions, y = Revenue)) +
geom_point() +
geom_smooth(method = "lm", color = "green", se = FALSE) +
labs(title = "Transactions vs Revenue chart")
ggplot(relationship, aes(x = Conversion.Rate...., y = Revenue)) +
geom_point() +
geom_smooth(method = "lm", color = "lightgreen", se = FALSE) +
labs(title = "Conversion Rate vs Revenue chart")
sapply(df2, class)
summary_stats <- data.frame(
Column = names(df2),
Mean = sapply(df2, mean, na.rm = TRUE),
Median = sapply(df2, median, na.rm = TRUE),
SD = sapply(df2, sd, na.rm = TRUE),
Variance = sapply(df2, var, na.rm = TRUE)
)
print(summary_stats)
for (col in names(df2)) {
p <- ggplot(df2, aes_string(x = col)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = paste("Histogram of", col, "before cleaning"),
x = col, y = "Frequency") +
theme_minimal()
print(p)  # in từng biểu đồ ra
}
ggplot(relationship, aes(x = Conversion.Rate...., y = Transactions)) +
geom_point() +
geom_smooth(method = "lm", color = "lightgreen", se = FALSE) +
labs(title = "Conversion Rate vs Revenue chart")
ggplot(relationship, aes(x = Conversion.Rate...., y = Transactions)) +
geom_point() +
geom_smooth(method = "lm", color = "lightgreen", se = FALSE) +
labs(title = "Conversion Rate vs Transaction chart")
summary_stats <- data.frame(
Mean = sapply(df2, mean, na.rm = TRUE),
Median = sapply(df2, median, na.rm = TRUE),
SD = sapply(df2, sd, na.rm = TRUE),
Variance = sapply(df2, var, na.rm = TRUE)
)
print(summary_stats)
View(df2)
summary(df2)         # checkout the outliner to find errors
str(df2)             # check out the data type per columns
sapply(df2, function(x) sum(is.na(x)))  # counting NA numbers
sapply(df2, function(x) sum(x == 0))    # Check for 0 if not valid
View(df2)
View(df2_cleaned)
summary_stats <- data.frame(
Mean = sapply(df2, mean, na.rm = TRUE),
Median = sapply(df2, median, na.rm = TRUE),
SD = sapply(df2, sd, na.rm = TRUE),
Variance = sapply(df2, var, na.rm = TRUE)
)
print(summary_stats)
# create a cleaned table of df2
df2_cleaned <- df2
# 2. Các cột có giá trị 0 cần xử lý
cols_to_fix <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI")
# 3. change 0 = NA
df2_cleaned[cols_to_fix] <- lapply(df_cleaned[cols_to_fix], function(x) {
ifelse(x == 0, NA, x)
})
# change NA = median
df2_cleaned[cols_to_fix] <- lapply(df2_cleaned[cols_to_fix], function(x) {
ifelse(is.na(x), median(x, na.rm = TRUE), x)
})
print(df2_cleaned)
# create a cleaned table of df2
df2_cleaned <- df2
# 2. Các cột có giá trị 0 cần xử lý
cols_to_fix <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI")
# 3. change 0 = NA
df2_cleaned[cols_to_fix] <- lapply(df_cleaned[cols_to_fix], function(x) {
ifelse(x == 0, NA, x)
})
# change NA = median
df2_cleaned[cols_to_fix] <- lapply(df2_cleaned[cols_to_fix], function(x) {
ifelse(is.na(x), median(x, na.rm = TRUE), x)
})
print(df_cleaned)
View(df_cleaned)
# create a cleaned table of df2
df2_cleaned <- df2
# 2. Các cột có giá trị 0 cần xử lý
cols_to_fix <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI")
# 3. change 0 = NA
df2_cleaned[cols_to_fix] <- lapply(df_cleaned[cols_to_fix], function(x) {
ifelse(x == 0, NA, x)
})
# change NA = median
df2_cleaned[cols_to_fix] <- lapply(df2_cleaned[cols_to_fix], function(x) {
ifelse(is.na(x), median(x, na.rm = TRUE), x)
})
print(df2_cleaned)
View(df2)
View(df)
View(df)
View(df2)
df2 <- read.csv("../data/diabetes.csv", sep=",")
print(df2)
# table of data before cleaned
print(df2)
summary(df2)         # checkout the outliner to find errors
str(df2)             # check out the data type per columns
sapply(df2, function(x) sum(is.na(x)))  # counting NA numbers
sapply(df2, function(x) sum(x == 0))    # Check for 0 if not valid
# create a cleaned table of df2
df2_cleaned <- df2
# 2. Các cột có giá trị 0 cần xử lý
cols_to_fix <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI")
# 3. change 0 = NA
df2_cleaned[cols_to_fix] <- lapply(df_cleaned[cols_to_fix], function(x) {
ifelse(x == 0, NA, x)
})
print(df2_cleaned)
summary(df2)         # checkout the outliner to find errors
str(df2)             # check out the data type per columns
sapply(df2, function(x) sum(is.na(x)))  # counting NA numbers
sapply(df2, function(x) sum(x == 0))    # Check for 0 if not valid
df2 <- read.csv("../data/diabetes.csv", sep=",")
print(df2)
sapply(df2, class)
summary_stats <- data.frame(
Mean = sapply(df2, mean, na.rm = TRUE),
Median = sapply(df2, median, na.rm = TRUE),
SD = sapply(df2, sd, na.rm = TRUE),
Variance = sapply(df2, var, na.rm = TRUE)
)
print(summary_stats)
for (col in names(df2)) {
p <- ggplot(df2, aes_string(x = col)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = paste("Histogram of", col, "before cleaning"),
x = col, y = "Frequency") +
theme_minimal()
print(p)  # in từng biểu đồ ra
}
summary(df2)         # checkout the outliner to find errors
str(df2)             # check out the data type per columns
sapply(df2, function(x) sum(is.na(x)))  # counting NA numbers
sapply(df2, function(x) sum(x == 0))    # Check for 0 if not valid
# table of data before cleaned
print(df2)
# create a cleaned table of df2
df2_cleaned <- df2
# 2. Các cột có giá trị 0 cần xử lý
cols_to_fix <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI")
# 3. change 0 = NA
df2_cleaned[cols_to_fix] <- lapply(df_cleaned[cols_to_fix], function(x) {
ifelse(x == 0, NA, x)
})
print(df2_cleaned)
# change NA = median
df2_cleaned[cols_to_fix] <- lapply(df2_cleaned[cols_to_fix], function(x) {
ifelse(is.na(x), median(x, na.rm = TRUE), x)
})
print(df2_cleaned)
View(df)
View(df_cleaned)
summary(df2)         # checkout the outliner to find errors
str(df2)             # check out the data type per columns
sapply(df2, function(x) sum(is.na(x)))  # counting NA numbers
sapply(df2, function(x) sum(x == 0))    # Check for 0 if not valid
# table of data before cleaned
print(df2)
# create a cleaned table of df2
df2_cleaned <- df2 %>%
# 2. cols have 0 data need to fix
cols_to_fix <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI")
# 3. change 0 = NA
df2_cleaned[cols_to_fix] <- lapply(df_cleaned[cols_to_fix], function(x) {
ifelse(x == 0, NA, x)
})
print(df2_cleaned)
# create a cleaned table of df2
df2_cleaned <- df2 %>%
# 2. cols have 0 data need to fix
cols_to_fix <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI")
# 3. change 0 = NA
df2_cleaned[cols_to_fix] <- lapply(df_cleaned[cols_to_fix], function(x) {
ifelse(x == 0, NA, x)
})
print(df2_cleaned)
# create a cleaned table of df2
df2_cleaned <- df2 %>%
# 2. cols have 0 data need to fix
cols_to_fix <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI")
# 3. change 0 = NA
df2_cleaned[cols_to_fix] <- lapply(df2_cleaned[cols_to_fix], function(x) {
ifelse(x == 0, NA, x)
})
print(df2_cleaned)
summary(df2)         # checkout the outliner to find errors
str(df2)             # check out the data type per columns
sapply(df2, function(x) sum(is.na(x)))  # counting NA numbers
sapply(df2, function(x) sum(x == 0))    # Check for 0 if not valid
# table of data before cleaned
print(df2)
# create a cleaned table of df2
df2_cleaned <- df2
# 2. cols have 0 data need to fix
cols_to_fix <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI")
# 3. change 0 = NA
df2_cleaned[cols_to_fix] <- lapply(df2_cleaned[cols_to_fix], function(x) {
ifelse(x == 0, NA, x)
})
print(df2_cleaned)
# change NA = median
df2_cleaned[cols_to_fix] <- lapply(df2_cleaned[cols_to_fix], function(x) {
ifelse(is.na(x), median(x, na.rm = TRUE), x)
})
print(df2_cleaned)
for (col in names(df_cleaned)) {
p <- ggplot(df_cleaned, aes_string(x = col)) +
geom_histogram(bins = 30, fill = "seagreen", color = "black") +
labs(title = paste("Histogram of", col, "after cleaning"),
x = col, y = "Frequency") +
theme_minimal()
print(p)
}
